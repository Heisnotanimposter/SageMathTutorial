# -*- coding: utf-8 -*-
"""Unsupervised MathSolver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CvIA2-qzvfvGyAAB70WPh6VOx05mUTUD
"""

import numpy as np
import tensorflow as tf

# 감독 없는 학습을 위한 오토인코더 신경망 정의
class Autoencoder(tf.keras.Model):
    def __init__(self):
        super(Autoencoder, self).__init__()
        self.encoder = tf.keras.Sequential([
            tf.keras.layers.Input(shape=(10,)),  # 10개의 수학 문제 특징
            tf.keras.layers.Dense(5, activation='relu'),
            tf.keras.layers.Dense(2, activation='relu')  # 2차원으로 압축
        ])
        self.decoder = tf.keras.Sequential([
            tf.keras.layers.Dense(5, activation='relu'),
            tf.keras.layers.Dense(10, activation='sigmoid')
        ])

    def call(self, inputs):
        encoded = self.encoder(inputs)
        decoded = self.decoder(encoded)
        return decoded

# 강화 학습 에이전트 정의
class ReinforcementAgent:
    def __init__(self):
        self.autoencoder = Autoencoder()
        self.optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)

    def compute_loss(self, real, predicted):
        # 평균 제곱 오차를 손실 함수로 사용
        return tf.reduce_mean(tf.square(real - predicted))

    def train(self, input_data, target_data):
        with tf.GradientTape() as tape:
            predicted_data = self.autoencoder(input_data)
            loss = self.compute_loss(target_data, predicted_data)
        gradients = tape.gradient(loss, self.autoencoder.trainable_variables)
        self.optimizer.apply_gradients(zip(gradients, self.autoencoder.trainable_variables))
        return loss

# 학습 데이터 생성 (간단한 수학 문제와 해답)
math_problems = np.random.random((100, 10))
solutions = np.sum(math_problems, axis=1)

# 학습
agent = ReinforcementAgent()
for epoch in range(1000):
    loss = agent.train(math_problems, math_problems)
    if epoch % 100 == 0:
        print(f'Epoch {epoch}: Loss={loss:.4f}')

# 모델 테스트
test_problems = np.random.random((10, 10))
predicted_solutions = agent.autoencoder(test_problems)
print("Predicted Solutions:")
print(predicted_solutions)

